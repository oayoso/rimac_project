{"version":3,"file":"rimac.js","sourceRoot":"","sources":["../../src/handlers/rimac.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,mEAA8D;AAC9D,0DAAqD;AACrD,mEAA8D;AAE9D,MAAM,UAAU,GAAG,IAAI,iCAAe,CAAC;IACnC,OAAO,EAAE,IAAI,2BAAY,CAAC;QACtB,UAAU,EAAE,IAAI,iCAAe,EAAE;KACpC,CAAC;CACL,CAAC,CAAA;AACK,MAAM,OAAO,GAAG,CAAO,KAAU,EAAE,EAAE;IACxC,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,KAAK,CAAC,CAAA;IAC/B,IAAI,KAAK,CAAC,cAAc,CAAC,QAAQ,IAAI,cAAc;WAC5C,KAAK,CAAC,OAAO,IAAI,SAAS,EAAE;QAC/B,OAAO,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;KACnC;IAED,IAAI,KAAK,CAAC,cAAc,CAAC,QAAQ,IAAI,WAAW;WACzC,KAAK,CAAC,OAAO,IAAI,OAAO,EAAE;QAC7B,OAAO,UAAU,CAAC,IAAI,EAAE,CAAC;KAC5B;IACD,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;AAC7B,CAAC,CAAA,CAAA;AAZY,QAAA,OAAO,WAYnB","sourcesContent":["import {RimacController} from \"../controller/RimacController\";\r\nimport {RimacService} from \"../service/RimacService\";\r\nimport {RimacRepository} from \"../repository/RimacRepository\";\r\n\r\nconst controller = new RimacController({\r\n    service: new RimacService({\r\n        repository: new RimacRepository()\r\n    })\r\n})\r\nexport const handler = async (event: any) => {\r\n    console.log('event -> ', event)\r\n    if (event.requestContext.routeKey == 'POST /create'\r\n        && event.rawPath == '/create') {\r\n        return controller.create(event);\r\n    }\r\n\r\n    if (event.requestContext.routeKey == 'GET /list'\r\n        && event.rawPath == '/list') {\r\n        return controller.list();\r\n    }\r\n    return Promise.resolve();\r\n}\r\n"]}