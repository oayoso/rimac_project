{"version":3,"file":"RimacController.js","sourceRoot":"","sources":["../../src/controller/RimacController.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,oDAA+C;AAG/C,gDAA2C;AAK3C,MAAa,eAAe;IACxB,YAAoB,KAAY;QAAZ,UAAK,GAAL,KAAK,CAAO;IAAG,CAAC;IAE9B,MAAM,CAAC,KAAU;;YACnB,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;YACnC,MAAM,OAAO,GAAG,IAAI,uBAAU,CAAC,IAAI,CAAC,CAAC;YACrC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YAE1D,OAAO,mBAAQ,CAAC,MAAM,CAAC,EAAE,UAAU,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,QAAQ,CAAC,EAAE,EAAE,EAAE,CAAC,CAAA;YAEtE,WAAW;YACX,uBAAuB;YACvB,4BAA4B;YAC5B,YAAY;YACZ,+BAA+B;YAC/B,YAAY;YACZ,SAAS;YACT,IAAI;QACR,CAAC;KAAA;IAEK,IAAI;;YACN,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;YAEjD,WAAW;YACX,uBAAuB;YACvB,sCAAsC;YACtC,IAAI;YAEJ,OAAO,mBAAQ,CAAC,MAAM,CAAC,EAAE,UAAU,EAAE,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAA;QAC/D,CAAC;KAAA;CACJ;AA9BD,0CA8BC","sourcesContent":["import { RimacService } from \"../service/RimacService\";\r\nimport {SwapiModel} from \"../model/SwapiModel\";\r\nimport { Context, APIGatewayProxyCallback, APIGatewayEvent, APIGatewayProxyResult,\r\n    APIGatewayProxyEvent, APIGatewayEventRequestContext } from 'aws-lambda';\r\nimport {Response} from \"../uilts/Response\";\r\n\r\ninterface Props {\r\n    service: RimacService\r\n}\r\nexport class RimacController {\r\n    constructor(private props: Props) {}\r\n\r\n    async create(event: any): Promise<APIGatewayProxyResult> {\r\n        const body = JSON.parse(event.body)\r\n        const request = new SwapiModel(body);\r\n        const response = await this.props.service.create(request);\r\n\r\n        return Response.return({ statusCode: 200, body: { id: response.id } })\r\n\r\n        // return {\r\n        //     statusCode: 200,\r\n        //     body: JSON.stringify(\r\n        //         {\r\n        //             id: response.id,\r\n        //         }\r\n        //     ),\r\n        // }\r\n    }\r\n\r\n    async list(): Promise<APIGatewayProxyResult> {\r\n        const response = await this.props.service.list();\r\n\r\n        // return {\r\n        //     statusCode: 200,\r\n        //     body: JSON.stringify(response),\r\n        // }\r\n\r\n        return Response.return({ statusCode: 200, body: response })\r\n    }\r\n}"]}